diff -urN chromium-61.0.3128.3.orig/third_party/WebKit/Source/platform/graphics/gpu/SharedGpuContext.h chromium-61.0.3128.3/third_party/WebKit/Source/platform/graphics/gpu/SharedGpuContext.h
--- chromium-61.0.3128.3.orig/third_party/WebKit/Source/platform/graphics/gpu/SharedGpuContext.h	2017-06-19 12:30:37.581788368 +0300
+++ chromium-61.0.3128.3/third_party/WebKit/Source/platform/graphics/gpu/SharedGpuContext.h	2017-06-19 12:31:45.866657857 +0300
@@ -8,6 +8,7 @@
 #include "platform/PlatformExport.h"
 #include "platform/wtf/ThreadSpecific.h"
 
+#include <functional>
 #include <memory>
 
 namespace gpu {
diff -urN chromium-61.0.3128.3.orig/v8/src/objects/hash-table.h chromium-61.0.3128.3/v8/src/objects/hash-table.h
--- chromium-61.0.3128.3.orig/v8/src/objects/hash-table.h	2017-06-19 12:30:22.561596255 +0300
+++ chromium-61.0.3128.3/v8/src/objects/hash-table.h	2017-06-19 12:32:32.310248557 +0300
@@ -140,22 +140,10 @@
   typedef Shape ShapeT;
   typedef typename Shape::Key Key;
 
-  // Wrapper methods
-  inline uint32_t Hash(Key key) {
-    if (Shape::UsesSeed) {
-      return Shape::SeededHash(key, GetHeap()->HashSeed());
-    } else {
-      return Shape::Hash(key);
-    }
-  }
-
-  inline uint32_t HashForObject(Key key, Object* object) {
-    if (Shape::UsesSeed) {
-      return Shape::SeededHashForObject(key, GetHeap()->HashSeed(), object);
-    } else {
-      return Shape::HashForObject(key, object);
-    }
-  }
+  // Wrapper methods.  Defined in src/objects-inl.h
+  // to break a cycle with src/heap/heap.h.
+  inline uint32_t Hash(Key key);
+  inline uint32_t HashForObject(Key key, Object* object);
 
   // Returns a new HashTable object.
   MUST_USE_RESULT static Handle<Derived> New(
diff -urN chromium-61.0.3128.3.orig/v8/src/objects-body-descriptors.h chromium-61.0.3128.3/v8/src/objects-body-descriptors.h
--- chromium-61.0.3128.3.orig/v8/src/objects-body-descriptors.h	2017-06-19 12:30:22.561596255 +0300
+++ chromium-61.0.3128.3/v8/src/objects-body-descriptors.h	2017-06-19 12:33:01.379619613 +0300
@@ -99,7 +99,7 @@
 
   template <typename StaticVisitor>
   static inline void IterateBody(HeapObject* obj, int object_size) {
-    IterateBody(obj);
+    IterateBody<StaticVisitor>(obj);
   }
 
   static inline int SizeOf(Map* map, HeapObject* object) { return kSize; }
diff -urN chromium-61.0.3128.3.orig/v8/src/objects-inl.h chromium-61.0.3128.3/v8/src/objects-inl.h
--- chromium-61.0.3128.3.orig/v8/src/objects-inl.h	2017-06-19 12:30:22.577596459 +0300
+++ chromium-61.0.3128.3/v8/src/objects-inl.h	2017-06-19 12:34:47.568077097 +0300
@@ -48,6 +48,25 @@
 namespace v8 {
 namespace internal {
 
+template <typename Derived, typename Shape, typename Key>
+uint32_t HashTable<Derived, Shape, Key>::Hash(Key key) {
+  if (Shape::UsesSeed) {
+    return Shape::SeededHash(key, GetHeap()->HashSeed());
+  } else {
+    return Shape::Hash(key);
+  }
+}
+
+template <typename Derived, typename Shape, typename Key>
+uint32_t HashTable<Derived, Shape, Key>::HashForObject(Key key,
+                                                       Object* object) {
+  if (Shape::UsesSeed) {
+    return Shape::SeededHashForObject(key, GetHeap()->HashSeed(), object);
+  } else {
+    return Shape::HashForObject(key, object);
+  }
+}
+
 PropertyDetails::PropertyDetails(Smi* smi) {
   value_ = smi->value();
 }
